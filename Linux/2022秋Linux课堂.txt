尤其注意空格，空格不写Linux不认识

命令的who与后置单词之间需要有空格
dc bc等功能结束后按Ctrl  d退出

储存在磁盘中的命令
即使是普通用户也可以读取管理员程序
但是无法运行

管道文件（p）为先写入先读出式，即类似队列

正则表达式检测网站https://regex101.com/
正则表达式用两个斜杠（/）括起
其中*表示匹配之前的一个整体的任意次数（包括0次）

正则表达式在Unix中的使用时需要结合grep命令
另外有一种更为强大的grep命令为pcregrep 

一句命令写完有时候需要记得写分号


1	u	8/3/2/4	io
2	o	2/5/3/1	ji
3	h	4/7/5/3	ny
9	w	1/8/3/2	ds
7	x	4/9/2/1	ih

Ctrl+r “输入查找内容”=reverse 即查找距离之前最近的一条最匹配的内容、

私钥可以推导公钥，但公钥不能推导私钥

跨行匹配N
换行符/n
将用户加入用户组时，组名写在用户名之前

shell运算中：
表达式与运算符之间要有空格，
例如2+2是不对的，而2 + 2是对的；
但是如果条件表达式放在方括号之间就不要有空格$[9+8]（correct）
用expr来表示运算时，则需要有空格

加减乘除运算中只有乘法的*需要转义运算，否则被认为是具有特殊含义的符号

printf的规定占位中“%04.2f”前者表示小数点前0的个数
后者表示小数点之后的位数

shell编程函数执行成功返回值为0
事实上执行的返回值只会是数字
shell编程中并没有严格区别字符串与数字，即使是数字也可以用字符串检测

脚本执行${#2}表示返回第二个字符串的长度

shell的printf输出时若使用‘单引号’是不替换字符串的（类似C中的双引号）
而进行字符串的拼接时才会使用双引号

while循环与until循环都会在第一次循环之前检测循环条件
而非while与dowhile的区别

case语句中表示默认分支的符号是星号*

shell中不能用于代码执行流程控制的语句是done
done只是表示流程的结束，而不能用于执行流程控制
continue，return都是可以的，会结束此语句之后的语句

定义函数时候是可以不写function关键字的
（自己写时候尽量写上，但是别人没写也是可以的）
定义函数时候不一定需要写明函数参数表
函数可以只用环境变量传递返回值

------------------小测知识整理-----------------------
符号连接型文件的标志是  l
/etc/shadow中存放有用户密码相关信息
使用>>操作符可以将前一命令的输出以追加方式写入到文件中
正则表达式中要求模式至少出现一次的修饰符是 *
按行反转的sed命令中，最高效率的是'1!G;$!h;$!d'
将两行文本拼为一行并以竖线分隔的sed命令是'N;s/\n/|/g'
Ubuntu22.04系统中软件包管理工具为apt
将用户加入组命令 sudo usermod -a -G mail user01 	(组名放在用户名之前）
匹配shell合法标识符的正则表达式是[a-zA-Z]*\w
匹配空行的正则表达式是'^$'
正则表达式中用于匹配任意字符的元字符是‘圆点  . ’
正则表达式中将默认的贪心搜索改为懒惰搜索的元字符是‘问号 ？’
匹配合法ipv4地址的正则表达式是‘\b((25[0-5]|2[0-4]\d|(0|1)?\d\d?)\.){3}(25[0-5]|2[0-4]\d|(0-1)?\d\d?)\b’
在执行shell脚本时，脚本内获取参数的格式是$n 其中表示脚本执行文件名的是 $0
bash变量中，表示传递参数个数和命令运行返回状态的是$#,$?
不能用来检测变量a是否为空字符串的是[$a!==" "]
能输出00003.14的语句是printf "%08.2f\n" 3.1415926
shell环境下表示命令执行成功的返回值是0
可以计算9+8的命令有：
a=$[9+8]	a=$((9+8))	a='echo "9+8"|bc'
而a='expr 9+8'是错误的

文件类型（书25页）
“-”指标准文件
“d”指目录文件
“l”指符号链接文件
“p”指管道文件
“s”表示Socket文件
ls命令输出行中第一个字符表示的是文件类型

权限的数字格式（书30页）
1执行权	2写权		3写和执行权
4读权		5读权和执行权	6读权和写权
7读权、写权和执行权

正则表达式（书P35）
使用{数字}来表示需要检测多少次
使用\b来表示单词边界

sort命令中sort -k表示排序范围，
例如4.7表示第四个字段的第七个字符开始（所有字符数与字段数从1开始记）